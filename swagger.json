{
  "swagger": "2.0",
  "info": {
    "version": "1.0.0",
    "title": "Swagger Petstories",
    "description": "API for pets",
    "termsOfService": "http://swagger.io/terms/",
    "contact": {
      "name": "Cool API Team"
    },
    "license": {
      "name": "We are freedom (WAF)"
    }
  },
  "host": "pets-zywq.onrender.com",
  "basePath": "/api",
  "schemes": ["https"],
  "consumes": ["application/json"],
  "produces": ["application/json"],
  "tags": [
    {
      "name": "users",
      "description": "API for users authenticate"
    },
    {
      "name": "notices",
      "description": "API for notices"
    }
  ],

  "securityDefinitions": {
    "BearerAuth": {
      "type": "apiKey",
      "name": "Authorization",
      "in": "header",
      "description": "Bearer token in the format 'Bearer <token>'"
    }
  },
  "paths": {
    "/users/register": {
      "post": {
        "summary": "Create a new user in the data base.  Duplicates are denied",
        "operationId": "addNewUser",
        "produces": ["application/json"],
        "tags": ["users"],
        "parameters": [
          {
            "name": "users",
            "in": "body",
            "description": "Registration of new user",
            "required": true,
            "schema": {
              "$ref": "#/definitions/NewUserReq"
            }
          }
        ],
        "responses": {
          "201": {
            "description": "User response",
            "schema": {
              "$ref": "#/definitions/NewUserRes"
            }
          }
        }
      }
    },
    "/users/login": {
      "post": {
        "summary": "Login a user from the data base.",
        "operationId": "loginUser",
        "produces": ["application/json"],
        "tags": ["users"],
        "parameters": [
          {
            "name": "users",
            "in": "body",
            "description": "Login of user",
            "required": true,
            "schema": {
              "$ref": "#/definitions/LoginUserReq"
            }
          }
        ],

        "responses": {
          "200": {
            "description": "User response",
            "schema": {
              "$ref": "#/definitions/LoginUserRes"
            }
          }
        }
      }
    },
    "/users/logout": {
      "post": {
        "summary": "Logout of a user.",
        "operationId": "logoutUser",
        "produces": ["application/json"],
        "tags": ["users"],
        "parameters": [
          {
            "name": "Logout",
            "description": "Bearer token must have in the format 'Bearer {token}'"
          }
        ],
        "security": [
          {
            "BearerAuth": []
          }
        ],
        "responses": {
          "200": {
            "description": "User response",
            "schema": {
              "$ref": "#/definitions/LogoutUserRes"
            }
          }
        }
      }
    },
    "/users/current": {
      "get": {
        "summary": "Returns one current user, only if he loggedin",
        "produces": ["application/json"],
        "tags": ["users"],
        "security": [
          {
            "BearerAuth": []
          }
        ],
        "parameters": [
          {
            "name": "Current",
            "description": "Bearer token must have in the format 'Bearer {token}'"
          }
        ],
        "responses": {
          "200": {
            "description": "A list of one current user",
            "schema": {
              "type": "object",
              "items": {
                "$ref": "#/definitions/CurrentUserRes"
              }
            }
          }
        }
      }
    },
    "/users/update": {
      "patch": {
        "summary": "Updates a user",
        "tags": ["users"],
        "security": [
          {
            "BearerAuth": []
          }
        ],
        "parameters": [
          {
            "name": "name",
            "in": "formData",
            "type": "string",
            "required": false,
            "description": "The name of the user"
          },
          {
            "name": "email",
            "in": "formData",
            "type": "string",
            "required": false,
            "description": "The email of the user"
          },
          {
            "name": "phone",
            "in": "formData",
            "type": "string",
            "required": false,
            "description": "The phone of the user"
          },
          {
            "name": "city",
            "in": "formData",
            "type": "string",
            "required": false,
            "description": "The city of the user"
          },
          {
            "name": "birthday",
            "in": "formData",
            "type": "string",
            "required": false,
            "description": "The birthday of the user"
          },
          {
            "name": "avatar",
            "in": "formData",
            "type": "file",
            "required": false,
            "description": "The avatar image of the user"
          }
        ],
        "responses": {
          "200": {
            "description": "User updated successfully",
            "schema": {
              "$ref": "#/definitions/CurrentUserRes"
            }
          }
        }
      }
    },
    "/notices/getall": {
      "get": {
        "summary": "Get all notices",
        "operationId": "getAllNotices",
        "produces": ["application/json"],
        "tags": ["notices"],
        "parameters": [
          {
            "name": "notices",
            "description": "Fetch all notices"
          }
        ],
        "responses": {
          "200": {
            "description": "Notices response",
            "schema": {
              "$ref": "#/definitions/NoticesRes"
            }
          }
        }
      }
    },
    "/notices/noticesuser": {
      "get": {
        "summary": "Get all notices of current user",
        "operationId": "getAllNoticesCurrentUser",
        "produces": ["application/json"],
        "tags": ["notices"],
        "parameters": [
          {
            "name": "notices",
            "description": "Fetch all notices of current user"
          }
        ],
        "responses": {
          "200": {
            "description": "Notices response",
            "schema": {
              "type": "array",
              "items": {
                "type": "object",
                "$ref": "#/definitions/NoticesRes"
              }
            }
          }
        }
      }
    },
    "/notices/search": {
      "get": {
        "summary": "Search notices",
        "operationId": "searchNotices",
        "produces": ["application/json"],
        "tags": ["notices"],
        "parameters": [
          {
            "name": "word",
            "in": "query",
            "type": "string",
            "description": "Search notices by the words of the title "
          },
          {
            "name": "category",
            "in": "query",
            "type": "string",
            "description": "Search notices by category"
          }
        ],
        "responses": {
          "200": {
            "description": "Search results",
            "schema": {
              "type": "array",
              "items": {
                "$ref": "#/definitions/NoticesRes"
              }
            }
          }
        }
      }
    },
    "/notices/{id}": {
      "get": {
        "summary": "Get  notice by ID",
        "operationId": "getOneNotice",
        "produces": ["application/json"],
        "tags": ["notices"],
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "description": "Fetch one notice",
            "type": "string",
            "required": true
          }
        ],
        "responses": {
          "200": {
            "description": "Notices response",
            "schema": {
              "$ref": "#/definitions/NoticesRes"
            }
          }
        }
      }
    },
    "/notices/add": {
      "post": {
        "summary": "Create a new notice.",
        "operationId": "addNewNotice",
        "produces": ["application/json"],
        "tags": ["notices"],
        "security": [
          {
            "BearerAuth": []
          }
        ],
        "parameters": [
          {
            "name": "category",
            "in": "formData",
            "type": "string",
            "description": "Category of notice (your pet/sell/lost/good hands)",
            "required": true
          },
          {
            "name": "name",
            "in": "formData",
            "type": "string",
            "required": false,
            "description": "The name of pet"
          },
          {
            "name": "birthday",
            "in": "formData",
            "type": "string",
            "required": false,
            "description": "Birthday of the pet"
          },
          {
            "name": "type",
            "in": "formData",
            "type": "string",
            "required": false,
            "description": "Type of pet (dog, cat e.g.)"
          },
          {
            "name": "comments",
            "in": "formData",
            "type": "string",
            "required": false,
            "description": "Comments of notice"
          },
          {
            "name": "file",
            "in": "formData",
            "type": "file",
            "required": false,
            "description": "The avatar image of the pet"
          },
          {
            "name": "title",
            "in": "formData",
            "type": "string",
            "required": false,
            "description": "Title of notice"
          },
          {
            "name": "sex",
            "in": "formData",
            "type": "string",
            "required": false,
            "description": "Sex of pet"
          },
          {
            "name": "location",
            "in": "formData",
            "type": "string",
            "required": false,
            "description": "Location of pet"
          },
          {
            "name": "price",
            "in": "formData",
            "type": "string",
            "required": false,
            "description": "Price of pet (Number)"
          }
        ],
        "responses": {
          "200": {
            "description": "User response",
            "type": "object",
            "schema": {
              "oneOf": [
                { "$ref": "#/definitions/NoticesResUser" },
                { "$ref": "#/definitions/NoticesResPet" }
              ]
            }
          }
        }
      }
    }
  },

  "definitions": {
    "NewUserReq": {
      "type": "object",
      "required": true,
      "properties": {
        "name": {
          "type": "string",
          "example": "Junior"
        },
        "email": {
          "type": "string",
          "example": "junior@junior.com"
        },
        "password": {
          "type": "string",
          "example": "Junior123"
        }
      }
    },
    "NewUserRes": {
      "type": "object",
      "required": true,
      "properties": {
        "name": {
          "type": "string",
          "example": "Junior"
        },
        "email": {
          "type": "string",
          "example": "junior@junior.com"
        },
        "password": {
          "type": "string",
          "example": "Hashed password ###"
        }
      }
    },
    "LoginUserReq": {
      "type": "object",
      "required": true,
      "properties": {
        "email": {
          "type": "string",
          "example": "junior@junior.com"
        },
        "password": {
          "type": "string",
          "example": "Junior123"
        }
      }
    },
    "LoginUserRes": {
      "type": "object",
      "required": true,
      "properties": {
        "_id": {
          "type": "string",
          "example": "User's <ID>"
        },
        "name": {
          "type": "string",
          "example": "Junior"
        },
        "email": {
          "type": "string",
          "example": "junior@junior.com"
        },
        "token": {
          "type": "string",
          "example": "Bearer <token>"
        }
      }
    },
    "LogoutUserRes": {
      "type": "object",
      "properties": {
        "message": {
          "type": "string",
          "example": "User with <ID> loged out"
        }
      }
    },
    "CurrentUserRes": {
      "type": "object",
      "required": ["name", "email", "password"],
      "properties": {
        "_id": {
          "type": "string",
          "example": "User's <ID>"
        },
        "name": {
          "type": "string",
          "example": "Junior"
        },
        "email": {
          "type": "string",
          "example": "junior@junior.com"
        },
        "password": {
          "type": "string",
          "example": "Hashed password ###"
        },
        "avatar": {
          "type": "string",
          "format": "uri",
          "example": "URL to image"
        },
        "phone": {
          "type": "string",
          "example": "(050)0000000"
        },
        "city": {
          "type": "string",
          "example": "Kiyv"
        },
        "birthday": {
          "type": "string",
          "example": "11.11.1999"
        },
        "pets": {
          "type": "array",
          "items": {
            "required": [
              "petId",
              "petName",
              "petBirthday",
              "petType",
              "petAvatar"
            ],
            "type": "object",
            "properties": {
              "petId": {
                "type": "string",
                "example": "Pet's <ID>"
              },
              "petName": {
                "type": "string",
                "example": "Barsik"
              },
              "petBirthday": {
                "type": "string",
                "example": "2020"
              },
              "petType": {
                "type": "string",
                "example": "Dog"
              },
              "petAvatar": {
                "type": "string",
                "format": "uri",
                "example": "URL to image"
              }
            }
          }
        },
        "favorites": {
          "type": "array",
          "items": {
            "type": "string",
            "example": "<noticeID_1>,<noticeID_2>, ...",
            "properties": {
              "noticeId": {
                "type": "string"
              }
            }
          }
        },
        "token": {
          "type": "string",
          "example": "Bearer <token>"
        }
      }
    },
    "NoticesRes": {
      "type": "object",
      "properties": {
        "price": {
          "type": "string",
          "example": "10000UAH"
        },
        "_id": {
          "type": "string",
          "example": "<noticeID>"
        },
        "name": {
          "type": "string",
          "example": "Junior"
        },
        "breed": {
          "type": "string",
          "example": "Red parrot"
        },
        "place": {
          "type": "string",
          "example": "Kiyv"
        },
        "imgUrl": {
          "type": "string",
          "example": "<URL> to image"
        },
        "title": {
          "type": "string",
          "example": "Help! My Parrot Was Rejected..."
        },
        "comments": {
          "type": "string",
          "example": "A gate agent suddenly objected..."
        },
        "birthday": {
          "type": "string",
          "example": "11.11.1999"
        },
        "category": {
          "type": "string",
          "example": "your pet/sell/lost/found/in good hands"
        },
        "sex": {
          "type": "string",
          "example": "female"
        },
        "email": {
          "type": "string",
          "example": "junior@junior.com"
        },
        "phone": {
          "type": "string",
          "example": "(050)0000000"
        },
        "favorite": {
          "type": "string",
          "example": "true"
        }
      }
    },
    "NoticesResPet": {
      "type": "object",
      "required": true,
      "properties": {
        "name": {
          "type": "string",
          "example": "Barsik"
        },
        "birthday": {
          "type": "string",
          "example": "11.11.2020"
        },
        "petType": {
          "type": "string",
          "example": "Dog"
        },
        "avatar": {
          "type": "string",
          "example": "URL to image"
        },
        "comments": {
          "type": "string",
          "example": "A Dog look for new home"
        }
      }
    },
    "NoticesResUser": {
      "type": "object",
      "required": true,
      "properties": {
        "name": {
          "type": "string",
          "example": "Barsik"
        },
        "avatar": {
          "type": "string",
          "example": "URL to image"
        },
        "title": {
          "type": "string",
          "example": "Help! My Parrot Was Rejected..."
        },
        "birthday": {
          "type": "string",
          "example": "11.11.2020"
        },
        "category": {
          "type": "string",
          "example": "your pet/sell/lost/found/in good hands"
        },
        "price": {
          "type": "string",
          "example": "10000UAH"
        },
        "sex": {
          "type": "string",
          "example": "male/female"
        },
        "email": {
          "type": "string",
          "example": "junior@junior.com"
        },
        "phone": {
          "type": "string",
          "example": "(050)0000000"
        },

        "petType": {
          "type": "string",
          "example": "Dog"
        },
        "comments": {
          "type": "string",
          "example": "A Dog look for new home"
        },
        "location": {
          "type": "string",
          "example": "Kiyv"
        }
      }
    }
  }
}
